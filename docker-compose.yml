version: '3.8'

services:
  # Core Infrastructure
  postgres:
    image: postgres:15-alpine
    container_name: satria-postgres
    environment:
      POSTGRES_DB: satria
      POSTGRES_USER: satria
      POSTGRES_PASSWORD: satria123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U satria"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:5.14-community
    container_name: satria-neo4j
    environment:
      NEO4J_AUTH: neo4j/satria123
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    ports:
      - "7474:7474"
      - "7687:7687"
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "satria123", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: satria-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: satria-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: satria-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data

  influxdb:
    image: influxdb:2.7-alpine
    container_name: satria-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: satria
      DOCKER_INFLUXDB_INIT_PASSWORD: satria123
      DOCKER_INFLUXDB_INIT_ORG: satria-ai
      DOCKER_INFLUXDB_INIT_BUCKET: metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: satria-token-123
    volumes:
      - influxdb_data:/var/lib/influxdb2
    ports:
      - "8086:8086"
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Vector Store
  chroma:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: satria-chroma
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 10s
      timeout: 5s
      retries: 5

  # SATRIA AI Core Services
  satria-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: satria-api
    environment:
      - POSTGRES_URL=postgresql://satria:satria123@postgres:5432/satria
      - NEO4J_URL=bolt://neo4j:satria123@neo4j:7687
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - INFLUXDB_URL=http://influxdb:8086
      - CHROMA_URL=http://chroma:8000
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      chroma:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./config:/app/config
    restart: unless-stopped

  # Event Bus Processor
  satria-events:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: satria-events
    command: ["python", "-m", "satria.core.event_processor"]
    environment:
      - POSTGRES_URL=postgresql://satria:satria123@postgres:5432/satria
      - NEO4J_URL=bolt://neo4j:satria123@neo4j:7687
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - satria-api
    volumes:
      - ./src:/app/src
      - ./config:/app/config
    restart: unless-stopped

  # Agent Orchestrator
  satria-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: satria-orchestrator
    command: ["python", "-m", "satria.core.agent_orchestrator"]
    environment:
      - POSTGRES_URL=postgresql://satria:satria123@postgres:5432/satria
      - NEO4J_URL=bolt://neo4j:satria123@neo4j:7687
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - satria-api
    volumes:
      - ./src:/app/src
      - ./config:/app/config
    restart: unless-stopped

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: satria-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: satria-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=satria123
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped

  # Web Dashboard
  satria-web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: satria-web
    ports:
      - "8080:80"
    environment:
      - SATRIA_API_URL=http://satria-api:8000
    depends_on:
      - satria-api
    restart: unless-stopped

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  redis_data:
  kafka_data:
  zookeeper_data:
  influxdb_data:
  chroma_data:
  prometheus_data:
  grafana_data: