# SATRIA Purple Team Playbook: PentestGPT Integration Demo
# Demonstrates AI-powered penetration test planning with HexStrike execution

id: pb-pentestgpt-integration-01
name: "AI-Powered Penetration Test Planning with PentestGPT"
version: "1.0.0"
description: "Demonstrate PentestGPT planning integrated with HexStrike tool execution"

metadata:
  author: "SATRIA AI Purple Team"
  created: "2025-09-19"
  mitre_techniques: ["T1595", "T1590", "T1046", "T1083"]
  safety_level: "moderate"
  environment: "lab"
  purple_team: true
  ai_planner: "pentestgpt"

# Preconditions
preconditions:
  - name: "pentestgpt_planner_online"
    check: "pentestgpt_planner.status == 'online'"
    description: "PentestGPT planner service is available"
  - name: "hexstrike_gateway_ready"
    check: "red_team_gateway.hexstrike.ready == true"
    description: "HexStrike MCP gateway is operational"
  - name: "target_profile_defined"
    check: "target.profile.complete == true"
    description: "Target profile is properly defined"
  - name: "lab_environment_isolated"
    check: "network.lab.isolated == true"
    description: "Lab environment is isolated"

# Target profile for AI planning
target_profile:
  name: "Lab Web Application"
  type: "web_application"
  domain: "webapp.lab.satria.local"
  ip_addresses: ["10.10.1.200", "10.10.1.201"]
  services:
    - port: 80
      service: "http"
      version: "Apache/2.4.41"
    - port: 443
      service: "https"
      version: "Apache/2.4.41"
    - port: 22
      service: "ssh"
      version: "OpenSSH 8.2"
  technologies:
    - "PHP 7.4"
    - "MySQL 8.0"
    - "WordPress 5.8"
  business_criticality: "low"
  data_classification: "test_data"

# Planning constraints for safety
planning_constraints:
  scope_allowlist:
    - "webapp.lab.satria.local"
    - "10.10.1.200/32"
    - "10.10.1.201/32"
  scope_blocklist:
    - "production.satria.local"
    - "10.0.0.0/8"
  max_duration_hours: 2
  max_concurrent_tasks: 2
  safety_level: "moderate"
  require_approval: true
  environment: "lab"
  compliance_requirements:
    - "no_destructive_testing"
    - "data_privacy_protection"
    - "business_hours_only"

# Phase 1: AI Planning
phases:
  - name: "ai_planning_phase"
    description: "Generate penetration test plan using PentestGPT"
    duration: "10m"
    actions:
      - name: "generate_test_plan"
        type: "planner.pentestgpt.create_plan"
        parameters:
          target_profile: "{{target_profile}}"
          constraints: "{{planning_constraints}}"
          scenario: "web_application_assessment"
          focus_areas:
            - "information_gathering"
            - "vulnerability_assessment"
            - "basic_enumeration"

      - name: "validate_plan_safety"
        type: "planner.safety.validate"
        parameters:
          plan_id: "{{generate_test_plan.plan_id}}"
          safety_checks:
            - "scope_compliance"
            - "tool_safety_levels"
            - "impact_assessment"
            - "approval_requirements"

      - name: "get_plan_approval"
        type: "planner.approval.request"
        parameters:
          plan_id: "{{generate_test_plan.plan_id}}"
          approvers: ["purple_team_lead", "security_architect"]
          approval_criteria:
            - "scope_verified"
            - "safety_validated"
            - "business_impact_acceptable"

# Phase 2: Plan Execution via HexStrike
  - name: "ai_guided_execution"
    description: "Execute AI-generated plan using HexStrike tools"
    duration: "60m"
    depends_on: ["ai_planning_phase"]
    preconditions:
      - "generate_test_plan.approved == true"
    actions:
      - name: "execute_reconnaissance_tasks"
        type: "red.hexstrike.execute_plan_phase"
        parameters:
          plan_id: "{{generate_test_plan.plan_id}}"
          phase: "reconnaissance"
          tasks_filter: "tool.safety_level in ['safe', 'moderate']"
          execution_mode: "sequential"

      - name: "execute_scanning_tasks"
        type: "red.hexstrike.execute_plan_phase"
        parameters:
          plan_id: "{{generate_test_plan.plan_id}}"
          phase: "scanning"
          tasks_filter: "tool.safety_level in ['safe', 'moderate']"
          execution_mode: "parallel"
          max_concurrency: 2

      - name: "execute_enumeration_tasks"
        type: "red.hexstrike.execute_plan_phase"
        parameters:
          plan_id: "{{generate_test_plan.plan_id}}"
          phase: "enumeration"
          tasks_filter: "tool.safety_level == 'moderate'"
          execution_mode: "sequential"

# Phase 3: AI-Assisted Analysis
  - name: "ai_analysis_phase"
    description: "Analyze results with AI assistance"
    duration: "20m"
    depends_on: ["ai_guided_execution"]
    actions:
      - name: "aggregate_findings"
        type: "planner.results.aggregate"
        parameters:
          plan_id: "{{generate_test_plan.plan_id}}"
          execution_results: "{{ai_guided_execution.results}}"
          analysis_focus:
            - "vulnerability_summary"
            - "risk_assessment"
            - "remediation_priorities"

      - name: "generate_ai_report"
        type: "planner.pentestgpt.generate_report"
        parameters:
          plan_id: "{{generate_test_plan.plan_id}}"
          findings: "{{aggregate_findings.results}}"
          report_format: "executive_summary"
          include_sections:
            - "methodology"
            - "findings_overview"
            - "risk_analysis"
            - "recommendations"

      - name: "create_detection_mappings"
        type: "planner.detection.map_findings"
        parameters:
          findings: "{{aggregate_findings.results}}"
          mapping_targets:
            - "mitre_attack_techniques"
            - "detection_signatures"
            - "purple_team_validation_points"

# Expected AI Planning Outputs
expected_plan_structure:
  phases:
    - "reconnaissance"
    - "scanning"
    - "enumeration"
    - "vulnerability_assessment"
    - "reporting"

  task_examples:
    reconnaissance:
      - tool: "subfinder"
        purpose: "subdomain_enumeration"
        safety_level: "safe"
      - tool: "dnsx"
        purpose: "dns_resolution"
        safety_level: "safe"

    scanning:
      - tool: "nmap"
        purpose: "port_scanning"
        safety_level: "moderate"
        args: ["-sV", "-sC", "--top-ports", "1000"]
      - tool: "nuclei"
        purpose: "vulnerability_scanning"
        safety_level: "moderate"
        args: ["-severity", "low,medium"]

    enumeration:
      - tool: "gobuster"
        purpose: "directory_enumeration"
        safety_level: "moderate"
        args: ["dir", "-w", "common.txt", "-t", "10"]

# Integration validation points
integration_validation:
  pentestgpt_planner:
    - name: "plan_generation_successful"
      check: "generate_test_plan.status == 'completed'"
      description: "PentestGPT generated a valid plan"

    - name: "safety_constraints_applied"
      check: "plan.tasks.all(task.safety_level <= constraints.safety_level)"
      description: "All tasks comply with safety constraints"

    - name: "scope_compliance_verified"
      check: "plan.tasks.all(task.targets in constraints.scope_allowlist)"
      description: "All tasks target only allowed systems"

  hexstrike_execution:
    - name: "tool_execution_successful"
      check: "hexstrike.executions.success_rate >= 0.9"
      description: "HexStrike successfully executed most tools"

    - name: "output_parsing_correct"
      check: "hexstrike.outputs.parsed_successfully >= 0.9"
      description: "Tool outputs were correctly parsed"

    - name: "safety_violations_none"
      check: "hexstrike.executions.safety_violations == 0"
      description: "No safety violations during execution"

  ai_analysis:
    - name: "findings_correlation_successful"
      check: "ai_analysis.findings.correlated > 0"
      description: "AI successfully correlated findings across tools"

    - name: "risk_assessment_complete"
      check: "ai_analysis.risk_scores.assigned == true"
      description: "Risk scores assigned to all findings"

    - name: "recommendations_generated"
      check: "ai_analysis.recommendations.count > 0"
      description: "Actionable recommendations were generated"

# Safety measures
safety:
  approval_required: true
  simulation_mode: false  # Real tools but safe targets
  monitoring_enabled: true

  ai_safeguards:
    - "plan_safety_validation"
    - "scope_constraint_enforcement"
    - "tool_safety_level_checks"
    - "impact_assessment_required"

  execution_safeguards:
    - "target_validation_per_tool"
    - "rate_limiting_active"
    - "timeout_enforcement"
    - "emergency_stop_capability"

  limits:
    max_plan_tasks: 15
    max_execution_time: "90m"
    max_concurrent_tools: 2
    max_target_connections: 100

# Success criteria
success_criteria:
  - name: "ai_planning_effectiveness"
    metric: "plan_quality_score >= 0.8"
    weight: 0.3
    description: "PentestGPT generates high-quality plans"

  - name: "hexstrike_integration_success"
    metric: "tool_execution_success_rate >= 0.9"
    weight: 0.3
    description: "HexStrike successfully executes planned tasks"

  - name: "ai_analysis_quality"
    metric: "analysis_completeness >= 0.8"
    weight: 0.2
    description: "AI analysis provides complete insights"

  - name: "safety_compliance"
    metric: "safety_violations == 0"
    weight: 0.2
    description: "No safety violations during execution"

# Learning objectives
learning_objectives:
  ai_planning_capabilities:
    - "Evaluate PentestGPT planning quality"
    - "Assess safety constraint enforcement"
    - "Measure plan optimization effectiveness"
    - "Validate scope management accuracy"

  tool_integration_effectiveness:
    - "Test HexStrike-PentestGPT coordination"
    - "Validate tool selection accuracy"
    - "Assess parameter optimization"
    - "Evaluate execution monitoring"

  analysis_and_reporting:
    - "Measure finding correlation quality"
    - "Assess risk scoring accuracy"
    - "Validate recommendation relevance"
    - "Test report generation quality"

# Knowledge distillation outputs
knowledge_outputs:
  - name: "ai_planning_patterns"
    type: "analysis_report"
    content: "{{pentestgpt_planning_effectiveness}}"
    destination: "knowledge_base/ai_planning"

  - name: "tool_integration_learnings"
    type: "best_practices"
    content: "{{hexstrike_integration_insights}}"
    destination: "knowledge_base/tool_integration"

  - name: "safety_enforcement_metrics"
    type: "compliance_report"
    content: "{{safety_validation_results}}"
    destination: "governance/safety_reports"

  - name: "purple_team_validation_data"
    type: "detection_mappings"
    content: "{{ai_generated_detection_signatures}}"
    destination: "detection_rules/ai_assisted"

# Post-execution analysis
post_execution:
  - name: "ai_planning_quality_assessment"
    action: "analysis.ai_planner_evaluation"
    parameters:
      plan_id: "{{generate_test_plan.plan_id}}"
      execution_results: "{{ai_guided_execution.results}}"
      quality_metrics:
        - "task_relevance"
        - "safety_compliance"
        - "efficiency"
        - "completeness"

  - name: "tool_integration_analysis"
    action: "analysis.integration_effectiveness"
    parameters:
      planner_outputs: "{{generate_test_plan.tasks}}"
      executor_results: "{{hexstrike.execution_history}}"
      integration_metrics:
        - "command_translation_accuracy"
        - "parameter_optimization"
        - "error_handling_effectiveness"
        - "result_parsing_quality"

  - name: "ai_assisted_detection_enhancement"
    action: "knowledge.extract_detection_improvements"
    parameters:
      ai_findings: "{{ai_analysis_phase.results}}"
      existing_detections: "{{current_detection_rules}}"
      enhancement_focus:
        - "new_signature_patterns"
        - "correlation_rule_improvements"
        - "false_positive_reduction"
        - "coverage_gap_filling"

  - name: "consciousness_layer_integration"
    action: "memory.store_ai_assisted_exercise"
    parameters:
      scenario_type: "ai_planning_integration"
      planner_performance: "{{ai_planning_quality_assessment}}"
      integration_effectiveness: "{{tool_integration_analysis}}"
      detection_enhancements: "{{ai_assisted_detection_enhancement}}"
      lessons_learned: "{{learning_objectives}}"
      improvement_recommendations: "{{post_execution_insights}}"